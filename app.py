from flask import Flask, render_template
from flask_wtf import FlaskForm as Form
from wtforms import StringField
from wtforms.validators import InputRequired, URL
import joblib
import re
import os

app = Flask(__name__)
# Set a secure SECRET_KEY
app.config['SECRET_KEY'] = os.urandom(24)

# Function to trim the URL to the main part
def trim(url):
    return re.match(r'(?:\w*://)?(?:.*\.)?([a-zA-Z-1-9]*\.[a-zA-Z]{1,}).*', url).groups()[0]

# Function to tokenize the URL
def getTokens(input):
    tokensBySlash = str(input.encode('utf-8')).split('/')
    allTokens = []
    for i in tokensBySlash:
        tokens = str(i).split('-')    
        tokensByDot = []
        for j in range(0, len(tokens)):
            tempTokens = str(tokens[j]).split('.')
            tokensByDot = tokensByDot + tempTokens
        allTokens = allTokens + tokens + tokensByDot
    allTokens = list(set(allTokens))
    if 'com' in allTokens:
        allTokens.remove('com')    
    return allTokens

# Form class using FlaskForm
class LoginForm(Form):
    url = StringField('Enter URL : ', validators=[InputRequired(), URL()])

# Route for handling the main page logic
@app.route('/', methods=['GET', 'POST'])
def index():
    form = LoginForm()
    if form.validate_on_submit():
        try:
            # Load the pre-trained model and vectorizer
            model = joblib.load('pre-trained/model-1.pkl')
            vectorizer = joblib.load("pre-trained/vectorizer1.pkl")
            # Predict using the trimmed URL
            prediction = model.predict(vectorizer.transform([trim(form.url.data)])) 
            #0 or 1. 0= Safe 1=unsafe

            # Render template based on prediction result
            if prediction[0] == 0:
                return render_template("success.html", url=form.url.data, status="Not Malicious")
            else:
                return render_template("success.html", url=form.url.data, status="Malicious")
        except Exception as e:
            # Log the exception and handle the error
            app.logger.error(f"An error occurred: {e}")
            # Return an error message or redirect to an error page
            return render_template("error.html", error=str(e))
    return render_template('index.html', form=form)

# Run the app
if __name__ == '__main__':
    app.run(debug=True)
